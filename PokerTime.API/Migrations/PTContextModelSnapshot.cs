// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using PokerTime.API.Data;

namespace PokerTime.API.Migrations
{
    [DbContext(typeof(PTContext))]
    partial class PTContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.7")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("PokerTime.API.Data.Entities.BlindLevel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Ante")
                        .HasColumnType("int");

                    b.Property<int>("BigBlind")
                        .HasColumnType("int");

                    b.Property<int>("LevelNumber")
                        .HasColumnType("int");

                    b.Property<int>("Minutes")
                        .HasColumnType("int");

                    b.Property<int>("SmallBlind")
                        .HasColumnType("int");

                    b.Property<int>("TournamentStructureId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TournamentStructureId");

                    b.ToTable("BlindLevel");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Ante = 20,
                            BigBlind = 100,
                            LevelNumber = 1,
                            Minutes = 30,
                            SmallBlind = 200,
                            TournamentStructureId = 1
                        },
                        new
                        {
                            Id = 2,
                            Ante = 25,
                            BigBlind = 150,
                            LevelNumber = 2,
                            Minutes = 30,
                            SmallBlind = 250,
                            TournamentStructureId = 1
                        });
                });

            modelBuilder.Entity("PokerTime.API.Data.Entities.Event", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("HostId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("StructureId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("HostId");

                    b.HasIndex("StructureId");

                    b.ToTable("Events");
                });

            modelBuilder.Entity("PokerTime.API.Data.Entities.TournamentStructure", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("HostId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("NumberOfEvents")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("HostId");

                    b.ToTable("TournamentStructures");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DateCreated = new DateTime(2021, 7, 13, 0, 0, 0, 0, DateTimeKind.Local),
                            Name = "Joe's Structure of Champions!",
                            NumberOfEvents = 0
                        });
                });

            modelBuilder.Entity("PokerTime.API.Data.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("EventId")
                        .HasColumnType("int");

                    b.Property<bool>("IsPaidUser")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Phone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("EventId");

                    b.HasIndex("UserId");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = new Guid("ba461614-db91-4f06-ab65-1ca507efaaee"),
                            Email = "MJSpain@gmail.com",
                            IsPaidUser = true,
                            Name = "Mike Spain",
                            Phone = "12354567890"
                        },
                        new
                        {
                            Id = new Guid("2065e32e-50d0-44a1-af0d-62b4a2f850e6"),
                            Email = "JimboSpain@gmail.com",
                            IsPaidUser = false,
                            Name = "Jim Spain",
                            Phone = "0987654321"
                        },
                        new
                        {
                            Id = new Guid("bdf42440-0a03-4c3d-a63b-99450b0f7c4e"),
                            Email = "Joe.Spain22@gmail.com",
                            IsPaidUser = false,
                            Name = "Joe Spain",
                            Phone = "7274094210"
                        });
                });

            modelBuilder.Entity("PokerTime.API.Data.Entities.BlindLevel", b =>
                {
                    b.HasOne("PokerTime.API.Data.Entities.TournamentStructure", null)
                        .WithMany("BlindLevels")
                        .HasForeignKey("TournamentStructureId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PokerTime.API.Data.Entities.Event", b =>
                {
                    b.HasOne("PokerTime.API.Data.Entities.User", "Host")
                        .WithMany()
                        .HasForeignKey("HostId");

                    b.HasOne("PokerTime.API.Data.Entities.TournamentStructure", "Structure")
                        .WithMany()
                        .HasForeignKey("StructureId");

                    b.Navigation("Host");

                    b.Navigation("Structure");
                });

            modelBuilder.Entity("PokerTime.API.Data.Entities.TournamentStructure", b =>
                {
                    b.HasOne("PokerTime.API.Data.Entities.User", "Host")
                        .WithMany("TournamentStructures")
                        .HasForeignKey("HostId");

                    b.Navigation("Host");
                });

            modelBuilder.Entity("PokerTime.API.Data.Entities.User", b =>
                {
                    b.HasOne("PokerTime.API.Data.Entities.Event", null)
                        .WithMany("Guests")
                        .HasForeignKey("EventId");

                    b.HasOne("PokerTime.API.Data.Entities.User", null)
                        .WithMany("Friends")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("PokerTime.API.Data.Entities.Event", b =>
                {
                    b.Navigation("Guests");
                });

            modelBuilder.Entity("PokerTime.API.Data.Entities.TournamentStructure", b =>
                {
                    b.Navigation("BlindLevels");
                });

            modelBuilder.Entity("PokerTime.API.Data.Entities.User", b =>
                {
                    b.Navigation("Friends");

                    b.Navigation("TournamentStructures");
                });
#pragma warning restore 612, 618
        }
    }
}
