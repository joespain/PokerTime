// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using PokerTime.API.Data;

namespace PokerTime.API.Migrations
{
    [DbContext(typeof(PTContext))]
    partial class PTContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.7")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("EventInvitee", b =>
                {
                    b.Property<int>("EventsId")
                        .HasColumnType("int");

                    b.Property<int>("InviteesId")
                        .HasColumnType("int");

                    b.HasKey("EventsId", "InviteesId");

                    b.HasIndex("InviteesId");

                    b.ToTable("EventInvitee");
                });

            modelBuilder.Entity("PokerTime.API.Data.Entities.BlindLevel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Ante")
                        .HasColumnType("int");

                    b.Property<int>("BigBlind")
                        .HasColumnType("int");

                    b.Property<int>("LevelNumber")
                        .HasColumnType("int");

                    b.Property<int>("Minutes")
                        .HasColumnType("int");

                    b.Property<int>("SmallBlind")
                        .HasColumnType("int");

                    b.Property<int>("TournamentStructureId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TournamentStructureId");

                    b.ToTable("BlindLevels");
                });

            modelBuilder.Entity("PokerTime.API.Data.Entities.Event", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("TournamentStructureId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Events");
                });

            modelBuilder.Entity("PokerTime.API.Data.Entities.Invitee", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Invitees");
                });

            modelBuilder.Entity("PokerTime.API.Data.Entities.TournamentStructure", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("NumberOfEvents")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("TournamentStructures");
                });

            modelBuilder.Entity("PokerTime.API.Data.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsPaidUser")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Phone")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 3,
                            Email = "MJSpain@gmail.com",
                            IsPaidUser = true,
                            Name = "Mike Spain",
                            Phone = "12354567890"
                        },
                        new
                        {
                            Id = 1,
                            Email = "JimboSpain@gmail.com",
                            IsPaidUser = false,
                            Name = "Jim Spain",
                            Phone = "0987654321"
                        },
                        new
                        {
                            Id = 2,
                            Email = "Joe.Spain22@gmail.com",
                            IsPaidUser = false,
                            Name = "Joe Spain",
                            Phone = "7274094210"
                        });
                });

            modelBuilder.Entity("EventInvitee", b =>
                {
                    b.HasOne("PokerTime.API.Data.Entities.Event", null)
                        .WithMany()
                        .HasForeignKey("EventsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PokerTime.API.Data.Entities.Invitee", null)
                        .WithMany()
                        .HasForeignKey("InviteesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PokerTime.API.Data.Entities.BlindLevel", b =>
                {
                    b.HasOne("PokerTime.API.Data.Entities.TournamentStructure", null)
                        .WithMany("BlindLevels")
                        .HasForeignKey("TournamentStructureId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PokerTime.API.Data.Entities.Event", b =>
                {
                    b.HasOne("PokerTime.API.Data.Entities.User", null)
                        .WithMany("Events")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PokerTime.API.Data.Entities.Invitee", b =>
                {
                    b.HasOne("PokerTime.API.Data.Entities.User", null)
                        .WithMany("Invitees")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PokerTime.API.Data.Entities.TournamentStructure", b =>
                {
                    b.HasOne("PokerTime.API.Data.Entities.User", null)
                        .WithMany("TournamentStructures")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PokerTime.API.Data.Entities.TournamentStructure", b =>
                {
                    b.Navigation("BlindLevels");
                });

            modelBuilder.Entity("PokerTime.API.Data.Entities.User", b =>
                {
                    b.Navigation("Events");

                    b.Navigation("Invitees");

                    b.Navigation("TournamentStructures");
                });
#pragma warning restore 612, 618
        }
    }
}
